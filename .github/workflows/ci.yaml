name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        pg-version: [ 14, 15, 16, 17]
      fail-fast: false

    env:
      PG_VER: ${{ matrix.pg-version }}
      PG_BIN: /usr/lib/postgresql/${{ matrix.pg-version }}/bin

    steps:
      - uses: actions/checkout@v4
      - name: Install PostgreSQL ${{ env.PG_VER }} APT repository and system dependencies
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          echo "----- Install system dependencies -----"
          sudo apt-get install -y \
            libreadline-dev \
            zlib1g-dev \
            flex \
            bison \
            build-essential \
            clang \
            llvm \
            ca-certificates \
            redis-tools
          echo ""
          sudo apt-get install -y postgresql-${{ env.PG_VER }} postgresql-server-dev-${{ env.PG_VER }}

      - name: Start Redis container
        run: docker run -d --name redis-server -p 8899:6379 redis

      - name: Start Redis Cluster for testing
        run: |
          echo "Starting Redis cluster for integration testing..."
          # Install docker-compose if not available
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Start Redis cluster using docker-compose
          docker-compose -f docker-compose.cluster-test.yml up -d
          
          # Wait for cluster to be ready
          echo "Waiting for Redis cluster to initialize..."
          timeout=120
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            if docker logs redis-cluster-test-init 2>&1 | grep -q "Redis cluster initialization completed successfully"; then
              echo "Redis cluster is ready!"
              break
            elif docker logs redis-cluster-test-init 2>&1 | grep -q "ERROR"; then
              echo "Redis cluster initialization failed:"
              docker logs redis-cluster-test-init
              exit 1
            fi
            sleep 5
            elapsed=$((elapsed + 5))
            echo "Waiting... (${elapsed}s/${timeout}s)"
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "Timeout waiting for Redis cluster to start"
            echo "Cluster logs:"
            docker-compose -f docker-compose.cluster-test.yml logs
            exit 1
          fi
          
          # Verify cluster status
          echo "Verifying cluster status..."
          redis-cli -h 127.0.0.1 -p 7001 cluster info
          redis-cli -h 127.0.0.1 -p 7001 cluster nodes
        
      - name: Install cargo-pgrx
        run: cargo install cargo-pgrx 

      - name: Initialize pgrx for PostgreSQL ${{ env.PG_VER }}
        run: cargo pgrx init --pg${{ env.PG_VER }} ${{ env.PG_BIN }}/pg_config

      - name: Report versions
        run: |
          cargo --version
          ${{ env.PG_BIN }}/pg_config --version

      - name: Chmod pg_config
        run: |
          sudo chmod 777 /usr/share/postgresql/${{ env.PG_VER }} -R
          sudo chmod 777 /usr/lib/postgresql/${{ env.PG_VER }} -R
          
      - name: Run Tests for PostgreSQL ${{ env.PG_VER }}
        env:
          REDIS_CLUSTER_TEST_ENABLED: "true"
          REDIS_CLUSTER_NODES: "127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003,127.0.0.1:7004,127.0.0.1:7005,127.0.0.1:7006"
        run: |
          echo "Running standard tests..."
          cargo pgrx test --release pg${{ env.PG_VER }}
          
          echo "Running cluster integration tests..."
          # Validate cluster is still running
          if redis-cli -h 127.0.0.1 -p 7001 ping; then
            echo "Cluster is healthy, running cluster tests..."
            cargo pgrx test --release pg${{ env.PG_VER }}
          else
            echo "Warning: Cluster not available, skipping cluster-specific tests"
          fi 

      - name: Package for PostgreSQL ${{ env.PG_VER }}
        run: cargo pgrx package --pg-config=${{ env.PG_BIN }}/pg_config

      - name: Cleanup Redis Cluster
        if: always()  # Run cleanup even if tests fail
        run: |
          echo "Cleaning up Redis cluster..."
          docker-compose -f docker-compose.cluster-test.yml down -v || true
          echo "Cleanup completed"
