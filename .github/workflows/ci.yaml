name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        pg-version: [ 14, 15, 16, 17]
      fail-fast: false

    env:
      PG_VER: ${{ matrix.pg-version }}
      PG_BIN: /usr/lib/postgresql/${{ matrix.pg-version }}/bin

    steps:
      - uses: actions/checkout@v4
      - name: Install PostgreSQL ${{ env.PG_VER }} APT repository and system dependencies
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          echo "----- Install system dependencies -----"
          sudo apt-get install -y \
            libreadline-dev \
            zlib1g-dev \
            flex \
            bison \
            build-essential \
            clang \
            llvm \
            ca-certificates \
            redis-tools
          echo ""
          sudo apt-get install -y postgresql-${{ env.PG_VER }} postgresql-server-dev-${{ env.PG_VER }}

      - name: Start Redis container
        run: docker run -d --name redis-server -p 8899:6379 redis

      - name: Start Redis Cluster for testing
        run: |
          echo "Starting Redis cluster for integration testing..."
          # Install docker-compose if not available
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Start Redis cluster using docker-compose
          echo "Starting Redis cluster containers..."
          docker-compose -f docker-compose.cluster-test.yml up -d
          
          # Wait for all containers to be healthy with better progress reporting
          echo "Waiting for all Redis containers to be healthy..."
          
          # Function to check container health
          check_container_health() {
            local container_name=$1
            local port=$2
            if docker ps --filter "name=$container_name" --filter "health=healthy" --format "{{.Names}}" | grep -q "$container_name"; then
              echo "  ✅ $container_name (port $port) is healthy"
              return 0
            else
              local status=$(docker ps --filter "name=$container_name" --format "{{.Status}}" | head -1)
              echo "  ⏳ $container_name (port $port) status: $status"
              return 1
            fi
          }
          
          # Wait for individual containers with timeout
          for i in {1..180}; do 
            echo "Attempt $i/180: Checking container health..."
            
            all_healthy=true
            check_container_health "redis-cluster-test-1" "7001" || all_healthy=false
            check_container_health "redis-cluster-test-2" "7002" || all_healthy=false
            check_container_health "redis-cluster-test-3" "7003" || all_healthy=false
            check_container_health "redis-cluster-test-4" "7004" || all_healthy=false
            check_container_health "redis-cluster-test-5" "7005" || all_healthy=false
            check_container_health "redis-cluster-test-6" "7006" || all_healthy=false
            
            if [ "$all_healthy" = true ]; then
              echo "All Redis containers are healthy, waiting for cluster initialization..."
              break
            fi
            sleep 1
          done
          redis-cli -h 127.0.0.1 -p 8899 ping
          redis-cli -h 127.0.0.1 -p 7001 ping
          redis-cli -h 127.0.0.1 -p 7002 ping
          redis-cli -h 127.0.0.1 -p 7003 ping

          redis-cli -h 127.0.0.1 -p 7001 cluster info 
          redis-cli -h 127.0.0.1 -p 7001 cluster nodes 
          
      - name: Install cargo-pgrx
        run: cargo install cargo-pgrx 

      - name: Initialize pgrx for PostgreSQL ${{ env.PG_VER }}
        run: cargo pgrx init --pg${{ env.PG_VER }} ${{ env.PG_BIN }}/pg_config

      - name: Report versions
        run: |
          cargo --version
          ${{ env.PG_BIN }}/pg_config --version

      - name: Chmod pg_config
        run: |
          sudo chmod 777 /usr/share/postgresql/${{ env.PG_VER }} -R
          sudo chmod 777 /usr/lib/postgresql/${{ env.PG_VER }} -R
          
      - name: Run Tests for PostgreSQL ${{ env.PG_VER }}
        env:
          REDIS_CLUSTER_TEST_ENABLED: "true"
          REDIS_CLUSTER_NODES: "127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003,127.0.0.1:7004,127.0.0.1:7005,127.0.0.1:7006"
        run: |
          echo "Running standard tests..."
          cargo pgrx test --release pg${{ env.PG_VER }}

      - name: Package for PostgreSQL ${{ env.PG_VER }}
        run: cargo pgrx package --pg-config=${{ env.PG_BIN }}/pg_config

      - name: Cleanup Redis Cluster
        if: always()  # Run cleanup even if tests fail
        run: |
          echo "Cleaning up Redis cluster..."
          
          # Show final debug information if tests failed
          if [ "${{ job.status }}" = "failure" ]; then
            echo "=== Final Debug Information (Test Failure) ==="
            ./scripts/debug_cluster.sh quick || true
          fi
          
          # Cleanup containers
          docker-compose -f docker-compose.cluster-test.yml down -v --remove-orphans || true
          
          # Force remove any remaining containers
          docker ps -a --filter "name=redis-cluster-test" --format "{{.Names}}" | xargs -r docker rm -f || true
          
          # Clean up networks
          docker network ls --filter "name=redis-cluster-test" --format "{{.Name}}" | xargs -r docker network rm || true
          
          echo "Cleanup completed"
